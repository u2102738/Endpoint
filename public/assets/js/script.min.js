// Dashboard - Active Devices
function storage(e, t, o) {
    var r = {
        chart: { height: o, type: "radialBar" },
        series: t,
        plotOptions: {
            radialBar: {
                hollow: { margin: 10, size: "40%" },
                dataLabels: {
                    showOn: "always",
                    style: { fontFamily: "Jost, sans-serif" },
                    name: { show: !1 },
                    value: {
                        color: "currentColor",
                        fontSize: "25px",
                        fontWeight: "500",
                        offsetY: 12,
                        show: !0,
                        formatter: function (e) {
                            return e + "%";
                        },
                    },
                    track: { background: "rgba(130,49,211, .10)" },
                },
            },
        },
        colors: ["currentColor"],
        fill: { type: "gradient", gradient: { shade: "dark", type: "horizontal", gradientToColors: ["currentColor"], stops: [0, 100] } },
        grid: { padding: { top: -23, bottom: -16 } },
        stroke: { lineCap: "round" },
    };
    $(e).length > 0 && new ApexCharts(document.querySelector(e), r).render();
}

$(document).ready(function() {
    var activePercentage = $('.storage').data('active-percentage');

    storage(".storage", [activePercentage], 241);
});
// storage(".storage", [1], 271),
storage(".storage2", [90], 310);

// Dashboard - Device Status Overview
function exampleLineChart(e, a, t, acceptedData, rejectedData) {
    let r;
    var o = document.getElementById(e);
    if (o) {
        o.height = 125;
        // o.getContext("2d"), (o.height = window.innerWidth <= 575 ? 180 : a);
        new Chart(o, {
            type: "line",
            data: {
                labels: [
                    "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                    "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
                ],
                datasets: [
                    {
                        label: "Accepted",
                        data: acceptedData,
                        backgroundColor: "#01B81A",
                        borderColor: "#01B81A",
                        borderWidth: 2,
                    },
                    {
                        label: "Rejected",
                        data: rejectedData,
                        backgroundColor: "#FF0F0F",
                        borderColor: "#FF0F0F",
                        borderWidth: 2,
                    },

                ],
            },
            options: {
                scales: {
                    x: { stacked: false },
                    y: {
                        stacked: false,
                        ticks: {
                            precision: 0, // Set the precision to 0 for whole numbers
                        },
                    },
                },
                animation: {
                    onComplete: () => {
                        r = !0;
                    },
                    delay: (e) => {
                        let a = 0;
                        return "data" !== e.type || "default" !== e.mode || r || (a = 200 * e.dataIndex + 50 * e.datasetIndex), a;
                    },
                },
            },
        });
    }
}

if (document.getElementById('lineChartBasic')) {
    var canvas = document.getElementById('lineChartBasic');
    var acceptedData = JSON.parse(canvas.getAttribute('data-accepted-data'));
    var rejectedData = JSON.parse(canvas.getAttribute('data-rejected-data'));

    // Rest of your code specific to the home page
    exampleLineChart("lineChartBasic", "105", false, acceptedData, rejectedData);
}

// Search function
$(function () {
    $(".adv-table-user").footable({ filtering: { enabled: !0, delay: 500 }, paging: { enabled: !0, current: 1 }, strings: { enabled: !1 }, components: { filtering: FooTable.UserFiltering } });
}),
    (FooTable.MyFiltering = FooTable.Filtering.extend({
        construct: function (t) {
            this._super(t);
        },
        draw: function () {
            this._super();
            var t = this.$form.find('input[name="filter"]');
            t.addClass("form-control ms-sm-10 ms-0"), $("<div/>", { class: "adv-table-searchs__input col-12 col-sm-auto my-xl-5 my-5" }).append(t).prependTo(this.$form);
        },
    }));

// Search DeviceTable(by Device)
$(document).ready(function () {
    // Add listener to the filter input
    $("#filterInput").on("input", function () {
        var keyword = $(this).val().toLowerCase();

        // Filter the table rows based on the entered keyword
        $("#deviceTable tbody tr").each(function () {
            var rowText = $(this).text().toLowerCase();

            // Show or hide the row based on the keyword match
            if (rowText.indexOf(keyword) !== -1) {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    });
});

// Search DeviceTable(by Group)
$(document).ready(function () {
    // Add listener to the filter input
    $("#filterInput-Group").on("input", function () {
        var keyword = $(this).val().toLowerCase();

        // Filter the table rows based on the entered keyword
        $("#deviceGroupTable tbody tr").each(function () {
            var rowText = $(this).text().toLowerCase();

            // Show or hide the row based on the keyword match
            if (rowText.indexOf(keyword) !== -1) {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    });
});

// Search with filter
$(function () {
    $(".adv-table-filter").footable({ filtering: { enabled: !0, delay: 500 }, paging: { enabled: !0, current: 1 }, strings: { enabled: !1 }, filtering: { enabled: !0 }, components: { filtering: FooTable.MyFiltering } });
}),
    (FooTable.MyFiltering = FooTable.Filtering.extend({
        construct: function (t) {
            this._super(t), (this.statuses = ["active", "disconnected"]), (this.statusDefault = "All"), (this.$status = null), (this.stateTitles = ["accepted", "rejected"]), (this.stateTitleDefault = "All"), (this.$stateTitle = null);
        },
        $create: function () {
            this._super();
            var t = this,
                e = $("<div/>", { class: "form-group dm-select d-flex align-items-center adv-table-searchs__position my-xl-25 my-15 me-sm-20 me-0 " })
                    .append($("<label/>", { class: "d-flex align-items-center mb-sm-0 mb-2", text: "state" }))
                    .prependTo(t.$form);
            (t.$status = $("<select/>", { class: "form-control ms-sm-10 ms-0" })
                .on("change", { self: t }, t._onStatusDropdownChanged)
                .append($("<option/>", { text: t.statusDefault }))
                .appendTo(e)),
                $.each(t.statuses, function (e, s) {
                    t.$status.append($("<option/>").text(s));
                });
            var s = $("<div/>", { class: "form-group dm-select d-flex align-items-center adv-table-searchs__status my-xl-25 my-15 mb-0 me-sm-30 me-0" })
                .append($("<label/>", { class: "d-flex align-items-center mb-sm-0 mb-2", text: "Status" }))
                .prependTo(t.$form);
            (t.$stateTitle = $("<select/>", { class: "form-control ms-sm-10 ms-0" })
                .on("change", { self: t }, t._onStateTitleDropdownChanged)
                .append($("<option/>", { text: t.stateTitleDefault }))
                .appendTo(s)),
                $.each(t.stateTitles, function (e, s) {
                    t.$stateTitle.append($("<option/>").text(s));
                });
        },
        _onStatusDropdownChanged: function (t) {
            var e = t.data.self,
                s = $(this).val();
            s !== e.statusDefault ? e.addFilter("state", s, ["state"]) : e.removeFilter("state"), e.filter();
        },
        _onStateTitleDropdownChanged: function (t) {
            var e = t.data.self,
                s = $(this).val();
            s !== e.stateTitleDefault ? e.addFilter("status", s, ["status"]) : e.removeFilter("status"), e.filter();
        },
        draw: function () {
            this._super();
            var t = this.find("state");
            t instanceof FooTable.Filter ? this.$status.val(t.query.val()) : this.$status.val(this.statusDefault);
            var e = this.find("status");
            e instanceof FooTable.Filter ? this.$stateTitle.val(e.query.val()) : this.$stateTitle.val(this.stateTitleDefault);
        },
    }));

$(document).ready(function () {
    $("#software-member").change(function () {
        var selectedOption = $(this).find("option:selected");
        var licenseType = selectedOption.data("license");
        var restrictionType = selectedOption.data("restriction");

        $("#license-member").prop("checked", licenseType == 1);
        $("#restriction-member").prop("checked", restrictionType == 1);

        // Update the labels based on the checkbox status
        updateCheckboxLabels();
    });

    // Listen to the change event of the checkboxes
    $("#license-member, #restriction-member").change(function () {
        // Update the labels based on the checkbox status
        updateCheckboxLabels();
    });

    function updateCheckboxLabels() {
        var licenseCheckbox = $("#license-member");
        var licenseLabel = $("#license-label");
        var restrictionCheckbox = $("#restriction-member");
        var restrictionLabel = $("#restriction-label");

        if (licenseCheckbox.prop("checked")) {
            licenseLabel.text("Licensed");
        } else {
            licenseLabel.text("Without License");
        }

        if (restrictionCheckbox.prop("checked")) {
            restrictionLabel.text("Allowed");
        } else {
            restrictionLabel.text("Prohibited");
        }
    }
});


// Deployment Store Loading Indicator.
(function() {
    function showLoadingIndicator() {
        // Show the loading indicator
        const loadingIndicator = document.querySelector('.storage-progress');
        loadingIndicator.textContent = 'Saving the data...';
        loadingIndicator.classList.remove('d-none');
    }

    function showCompletionMessage() {
        // Show the completion message
        const loadingIndicator = document.querySelector('.storage-progress');
        loadingIndicator.textContent = 'Completed!';
        setTimeout(() => {
            // Hide the completion message after 2 seconds
            loadingIndicator.classList.add('d-none');
            loadingIndicator.textContent = ''; // Reset the content
        }, 2000);
    }

    function handleFormSubmit(event) {
        event.preventDefault(); // Prevent the default form submission

        const form = event.target;

        // Show loading indicator when the form is submitted
        showLoadingIndicator();

        const formData = new FormData(form);
        const xhr = new XMLHttpRequest();

        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                // The request is completed, handle the response here if needed.
                // For example, you can show a success message or reload the page.
                // For now, we'll show the completion message after the request is done.
                if (xhr.status === 200) {
                    // Success
                    console.log('File data saved successfully');
                    showCompletionMessage(); // Show the completion message
                    window.location.reload(); // You can redirect to another page if needed.
                } else {
                    // Error
                    console.error('Error saving file data');
                }
            }
        };

        xhr.open(form.method, form.action, true);
        xhr.setRequestHeader('X-CSRF-TOKEN', document.querySelector('meta[name="csrf-token"]').content);
        xhr.send(formData);
    }

    function updateFileName(input) {
        // Your implementation for the "new-package" form's file name update
        const form = document.getElementById('new-package');
        const file = input.files[0];
        const fileList = form.querySelector('#uploaded-files-list');

        // Clear previous file entries
        fileList.innerHTML = '';

        // Add the new file name to the list
        const listItem = document.createElement('li');
        listItem.textContent = file.name;
        fileList.appendChild(listItem);

        // Show the progress bar for upload
        const progress = form.querySelector('.progress-bar');
        progress.style.width = '0%'; // Reset progress bar width
        progress.setAttribute('aria-valuenow', '0');
        progress.parentElement.classList.remove('d-none'); // Show the progress bar container

        // Create a new FormData object
        const formData = new FormData();
        formData.append('file', file);

        // Create a new XMLHttpRequest
        const xhr = new XMLHttpRequest();

        // Set up the progress event handler for upload progress
        xhr.upload.addEventListener('progress', function (event) {
            if (event.lengthComputable) {
                const percent = (event.loaded / event.total) * 100;

                // Update the progress bar for upload
                progress.style.width = percent + '%';
                progress.setAttribute('aria-valuenow', percent);
            }
        });

        // Set up the load event handler for upload completion
        xhr.addEventListener('load', function () {
            if (xhr.status === 200) {
                // File upload completed successfully
                console.log('File uploaded successfully');

                // Hide the progress bar for upload
                progress.parentElement.classList.add('d-none');
            } else {
                // File upload failed
                console.error('File upload failed');
            }
        });

        // Set up the error event handler for upload failure
        xhr.addEventListener('error', function () {
            console.error('An error occurred while uploading the file');
            console.error(xhr.status); // Print the HTTP status code
            console.error(xhr.statusText); // Print the status text
            console.error(xhr.responseText); // Print the server's response
        });

        // Open and send the request for file upload
        const packageStoreRoute = "{{ route('software-deployment.packageStore', app()->getLocale()) }}";
        xhr.open('POST', packageStoreRoute);
        xhr.setRequestHeader('X-CSRF-TOKEN', document.querySelector('meta[name="csrf-token"]').getAttribute('content'));
        xhr.send(formData);
    }

    function clearFile() {
        const form = document.getElementById('new-package');
        const input = form.querySelector('#upload-2');
        input.value = ''; // Clear the file input value
        const fileList = form.querySelector('#uploaded-files-list');
        fileList.innerHTML = ''; // Clear the file name list

        // Hide the progress bar for upload
        const progress = form.querySelector('.progress');
        progress.parentElement.classList.add('d-none');
    }

    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('new-package');
        form.addEventListener('submit', handleFormSubmit); // Listen for form submission
        // Add the definition of checkFormValidity function if needed
    });

    function init() {
        const form = document.getElementById('new-package');
        form.addEventListener('submit', handleFormSubmit); // Listen for form submission

        // Attach the event listener for the file input change event
        const fileInput = form.querySelector('#upload-2');
        fileInput.addEventListener('change', function () {
            updateFileName(this);
        });
    }

    document.addEventListener('DOMContentLoaded', init);
})();

!(function (e) {
    function t(t) {
        var s;
        try {
            s = e.datepicker.parseDate(dateFormat, t.value);
        } catch (e) {
            s = null;
        }
        return s;
    }
    e(".table-responsive--dynamic .dropdown").on("show.bs.dropdown", function () {
        var t = e(this).find(".btn-link"),
            s = e(this).find(".table-responsive--dynamic .dropdown-menu");
        e(this).css("position", "static"), s.css({ top: t.offset().top + t.outerHeight(!0) + "px", left: t.offset().left + "px" }), s.data("open", !0);
    }),
        e(".table-responsive--dynamic .dropdown").on("hidden.bs.dropdown", function () {
            e(this).find(".table-responsive--dynamic .dropdown-menu").data("open", !1);
        }),
        e(".table-responsive--dynamic").scroll(function () {
            var t = e(this).find(".table-responsive--dynamic .dropdown"),
                s = e(this).find(".btn-link"),
                a = e(this).find(".table-responsive--dynamic .dropdown-menu");
            a.data("open") && (a.css({ top: s.offset().top + s.outerHeight(!0) + "px", left: s.offset().left + "px" }), t.toggleClass("open", s.offset().left > e(this).offset().left));
        }),
        e("#datepicker,#datepicker2,#datepicker3,#datepicker4,#datepicker5,#datepicker6,#datepicker7").datepicker({ dateFormat: "d MM yy", duration: "medium", changeMonth: !0, changeYear: !0, yearRange: "2022:2010" }),
        e("#datepicker9").datepicker({ dateFormat: "yy-mm-dd", timeFormat: " hh:ii:ss", showWeek: !0 }),
        e("#datepicker8").datepicker({ minDate: -20, maxDate: "+1M +10D" }),
        e("#datepicker").on("clcik", function () {
            "add" == this.id ? e(".ui-datepicker").addClass("myClass", "fast") : e(".ui-datepicker").removeClass("myClass", "fast");
        }),
        e("body").on("click", "#datepicker,#datepicker2", function () {
            e(this).closest("body").addClass("datePicker-active");
        }),
        e("body").on("click", function (t) {
            e(t.target).closest("#datepicker,#datepicker2").length || e("body").removeClass("datePicker-active");
        }),
        window.addEventListener("load", function () {
            document.querySelector("body").classList.add("loaded");
        }),
        (from = e('input[name="date-range-from"]')
            .datepicker({
                defaultDate: "+1w",
                changeMonth: !0,
                numberOfMonths: 2,
                onSelect: function () {
                    e("#ui-datepicker-div").addClass("testX");
                },
            })
            .on("change", function () {
                to.datepicker("option", "minDate", t(this));
            })),
        (to = e('input[name="date-range-to"]')
            .datepicker({ defaultDate: "+1w", changeMonth: !0, numberOfMonths: 2 })
            .on("change", function () {
                from.datepicker("option", "maxDate", t(this));
            })),
        e("img.svg").each((t, s) => {
            const a = e(s),
                i = a.attr("id"),
                l = a.attr("class"),
                o = a.attr("src");
            e.get(
                o,
                (t) => {
                    let s = e(t).find("svg");
                    void 0 !== i && (s = s.attr("id", i)),
                        void 0 !== l && (s = s.attr("class", l + " replaced-svg")),
                        (s = s.removeAttr("xmlns:a")),
                        !s.attr("viewBox") && s.attr("height") && s.attr("width") && s.attr(`viewBox 0 0  ${s.attr("height")} ${s.attr("width")}`),
                        a.replaceWith(s);
                },
                "xml"
            );
        }),
        e("body").on("click", function (t) {
            window.matchMedia("(max-width: 1151px)").matches &&
                0 == e(t.target).is(".sidebar__menu-group *") &&
                0 == e(t.target).is(".header-top *") &&
                (e(".sidebar").addClass("collapsed"), e(".contents").addClass("expanded"), e(".footer-wrapper").addClass("expanded"));
        });
    const s = document.querySelector(".sidebar-toggle");
    s &&
        s.addEventListener("click", function (t) {
            t.preventDefault(),
                e(".overlay-dark-sidebar").toggleClass("show"),
                document.querySelector(".sidebar").classList.toggle("collapsed"),
                document.querySelector(".contents").classList.toggle("expanded"),
                document.querySelector(".footer-wrapper").classList.toggle("expanded");
        }),
        e(window).on("scroll", function (e) {
            let t = document.querySelector(".blog-details"),
                s = document.querySelector(".blog-share-top");
            null != t &&
                null != s &&
                (window.pageYOffset <= t.offsetTop ? s.classList.remove("show") : window.pageYOffset >= t.offsetTop && window.pageYOffset <= t.offsetTop + t.clientHeight - 700 ? s.classList.add("show") : s.classList.remove("show"));
        }),
        e(".sidebar_nav .has-child ul").hide(),
        e(".sidebar_nav .has-child.open ul").show(),
        e(".sidebar_nav .has-child >a").on("click", function (t) {
            t.preventDefault(),
                e(this).parent().next("has-child").slideUp(),
                e(this).parent().parent().children(".has-child").children("ul").slideUp(),
                e(this).parent().parent().children(".has-child").removeClass("open"),
                e(this).next().is(":visible") ? e(this).parent().removeClass("open") : (e(this).parent().addClass("open"), e(this).next().slideDown());
        }),
        e(window)
            .bind("resize", function () {
                window.innerWidth;
                e(this).width() <= 767.98 ? (e(".navbar-right__menu").appendTo(".mobile-author-actions"), e(".contents").addClass("expanded"), e(".sidebar ").addClass("collapsed")) : e(".navbar-right__menu").appendTo(".navbar-right");
            })
            .trigger("resize"),
        e(window)
            .bind("resize", function () {
                window.innerWidth;
                e(this).width() > 767.98 && e(".dm-mail-sidebar").addClass("show");
            })
            .trigger("resize"),
        e(window)
            .bind("resize", function () {
                window.innerWidth;
                e(this).width() <= 991 &&
                    (e(".sidebar").addClass("collapsed"),
                    e(".sidebar-toggle").on("click", function () {
                        e(".overlay-dark-sidebar").toggleClass("show");
                    }),
                    e(".overlay-dark-sidebar").on("click", function () {
                        e(this).removeClass("show"), e(".sidebar").addClass("collapsed");
                    }));
            })
            .trigger("resize"),
        e(window)
            .bind("resize", function () {
                window.innerWidth;
                e(this).width() <= 991.98 && e(".menu-horizontal").appendTo(".mobile-nav-wrapper");
            })
            .trigger("resize"),
        e(".btn-search").on("click", function () {
            e(this).toggleClass("search-active"), e(".mobile-search").toggleClass("show"), e(".mobile-author-actions").removeClass("show");
        }),
        e(".kanban-items li").hover(function () {
            e(this).toggleClass("active");
        }),
        e(".btn-author-action").on("click", function () {
            e(".mobile-author-actions").toggleClass("show"), e(".mobile-search").removeClass("show"), e(".btn-search").removeClass("search-active");
        }),
        e(".menu-mob-trigger").on("click", function (t) {
            t.preventDefault(), e(".mobile-nav-wrapper").toggleClass("show");
        }),
        e(".nav-close").on("click", function (t) {
            t.preventDefault(), e(".mobile-nav-wrapper").removeClass("show");
        }),
        e(".list-thumb-gallery li a").click(function (t) {
            e(".list-thumb-gallery li a").removeClass("active");
            var s = e(this);
            s.hasClass("active") || s.addClass("active");
        }),
        document.querySelector(".print-btn") &&
            document.querySelector(".print-btn").addEventListener("click", function () {
                var e, t, s;
                (e = ".payment-invoice"), (t = document.body.innerHTML), (s = document.querySelector(e).innerHTML), (document.body.innerHTML = s), window.print(), (document.body.innerHTML = t);
            });
    var a = {
            dots: !0,
            infinite: !1,
            speed: 300,
            slidesToShow: 1,
            slidesToScroll: 1,
            prevArrow: !1,
            nextArrow: !1,
            responsive: [
                { breakpoint: 1024, settings: { slidesToShow: 3, slidesToScroll: 3, infinite: !0, dots: !0 } },
                { breakpoint: 600, settings: { slidesToShow: 2, slidesToScroll: 2 } },
                { breakpoint: 480, settings: { slidesToShow: 1, slidesToScroll: 1 } },
            ],
        },
        l = {
            dots: !0,
            infinite: !0,
            speed: 300,
            slidesToShow: 3,
            slidesToScroll: 1,
            centerMode: !0,
            centerPadding: 30,
            centerPadding: 0,
            prevArrow: '<div class="slider-arrow slider-prev las la-arrow-left"></div>',
            nextArrow: '<div class="slider-arrow slider-next las la-arrow-right"></div>',
            responsive: [
                { breakpoint: 1499, settings: { slidesToShow: 2, slidesToScroll: 1, infinite: !0, centerMode: !1, dots: !0 } },
                { breakpoint: 767, settings: { slidesToShow: 1, slidesToScroll: 1 } },
                { breakpoint: 600, settings: { slidesToShow: 1, slidesToScroll: 1 } },
                { breakpoint: 480, settings: { slidesToShow: 1, slidesToScroll: 1 } },
            ],
        },
        o = {
            dots: !1,
            infinite: !0,
            speed: 300,
            slidesToShow: 2,
            slidesToScroll: 1,
            prevArrow: '<div class="slider-arrow slider-prev las la-arrow-left"></div>',
            nextArrow: '<div class="slider-arrow slider-next las la-arrow-right"></div>',
            responsive: [
                { breakpoint: 1499, settings: { slidesToShow: 2, slidesToScroll: 1, infinite: !0, centerMode: !1, dots: !0 } },
                { breakpoint: 767, settings: { slidesToShow: 1, slidesToScroll: 1 } },
                { breakpoint: 600, settings: { slidesToShow: 1, slidesToScroll: 1 } },
                { breakpoint: 480, settings: { slidesToShow: 1, slidesToScroll: 1 } },
            ],
        },
        n = { dots: !1, slidesToShow: 1, slidesToScroll: 1, fade: !0, infinite: !0, asNavFor: ".testimonial-slider3-nav", arrows: !1 },
        r = {
            dots: !1,
            infinite: !0,
            slidesToShow: 3,
            slidesToScroll: 1,
            centerMode: !0,
            asNavFor: ".testimonial-slider3-for",
            lazyLoad: "progressive",
            swipe: !0,
            focusOnSelect: !0,
            cssEase: "linear",
            touchMove: !0,
            arrows: !1,
            responsive: [
                { breakpoint: 1899, settings: { slidesToShow: 3, slidesToScroll: 1, centerMode: !0 } },
                { breakpoint: 1600, settings: { slidesToShow: 3, slidesToScroll: 1 } },
            ],
        },
        d = {
            dots: !1,
            infinite: !0,
            speed: 300,
            slidesToShow: 1,
            slidesToScroll: 1,
            prevArrow: '<div class="slider-arrow slider-prev las la-arrow-left"></div>',
            nextArrow: '<div class="slider-arrow slider-next las la-arrow-right"></div>',
        };
    "rtl" == e("html").attr("dir") && ((a.rtl = !0), (l.rtl = !0), (o.rtl = !0), (n.rtl = !0), (r.rtl = !0), (d.rtl = !0)),
        e(".banner-slider").slick(a),
        e(".testimonial-slider1").slick(l),
        e(".testimonial-slider2").slick(o),
        e(".testimonial-slider3-for").slick(n),
        e(".testimonial-slider3-nav").slick(r),
        e(".testimonial-slider4").slick(d),
        document.getElementsByClassName("slick-slider") &&
            (e('a[data-bs-toggle="tab"]').on("shown.bs.tab", function () {
                e(".slick-slider").slick("refresh");
            }),
            e(document).ready(function () {
                e(".global-slider").slick({ dots: !0, arrows: !1 });
            })),
        e(".dropdown-clickEvent a").on("click", function (t) {
            t.preventDefault();
            const s = `\n            <div class="dm-notice">\n                <span>${e(this).text()} Clicked</span>\n            </div>\n        `;
            e(".dm-message").prepend(s),
                e(".dm-message").toggleClass("show"),
                setTimeout(function () {
                    e(".dm-message").empty(), e(".dm-message").removeClass("show");
                }, 3e3);
        }),
        e(".ap-post-gallery").magnificPopup({
            delegate: "a",
            type: "image",
            tLoading: "Loading image #%curr%...",
            mainClass: "mfp-img-mobile",
            gallery: { enabled: !0, navigateByImgClick: !0, preload: [0, 1] },
            image: { tError: '<a href="%url%">The image #%curr%</a> could not be loaded.' },
        }),
        e(".popup-youtube").magnificPopup({ disableOn: 700, type: "iframe", mainClass: "mfp-fade", removalDelay: 160, preloader: !1, fixedContentPos: !1 }),
        e(".friends-follow").on("click", function (t) {
            t.preventDefault(),
                ($button = e(this)),
                $button.hasClass("following") ? ($button.removeClass("following"), $button.removeClass("unfollow"), $button.text("Follow")) : ($button.html('<i class="la la-check"></i> following'), $button.addClass("following"));
        });
    const c = document.querySelector(".ap-post-form"),
        u = document.querySelector(".ap-post-form textarea"),
        p = document.createElement("div");
    p.classList.add("overlay-dark"),
        c &&
            u &&
            u.addEventListener("click", function (e) {
                e.preventDefault(),
                    document.body.appendChild(p),
                    (p.style.opacity = "1"),
                    (p.style.visibility = "visible"),
                    (document.body.style.position = "relative"),
                    setTimeout(function () {
                        c.classList.add("highlighted");
                    }, 300);
            }),
        null !== c &&
            document.body.addEventListener("click", function (e) {
                !e.target.closest(".ap-post-form") &&
                    c.classList.contains("highlighted") &&
                    (document.body.removeChild(p), (p.style.opacity = "0"), (p.style.visibility = "hidden"), document.body.removeAttribute("style"), c.classList.remove("highlighted"));
            }),
        e("#countryOption,#cityOption,#skillsOption,#exampleFormControlSelect1,#select-countryOption").select2({ minimumResultsForSearch: 1 / 0, placeholder: "Please Select", allowClear: !0 }),
        e("#event-category").select2({ minimumResultsForSearch: 1 / 0, placeholder: "Project Category", allowClear: !0 }),
        e("#category-member").select2({ minimumResultsForSearch: 1 / 0, placeholder: "Project Category", dropdownCssClass: "category-member", allowClear: !0 }),
        e("#cupon").select2({ minimumResultsForSearch: 1 / 0, placeholder: "Select Coupon", dropdownCssClass: "cupon", allowClear: !0 }),
        e("#month").select2({ minimumResultsForSearch: 1 / 0, placeholder: "MM", dropdownCssClass: "month", allowClear: !0 }),
        e("#year").select2({ minimumResultsForSearch: 1 / 0, placeholder: "yy", dropdownCssClass: "year", allowClear: !0 }),
        e("#clock").countdown("2030/10/10", function (t) {
            e(this).html(
                t.strftime(
                    '<span class="number">%d<span class="text">days</span></span> <span class="number">%H<span class="text">hours</span></span> <span class="number">%M<span class="text">minutes</span></span> <span class="number">%S<span class="text">seconds</span></span> '
                )
            );
        }),
        e('#customSwitch1, input[name="intervaltype"]').on("click", function () {
            e(".monthly,#monthly").toggleClass("active"), e(".yearly,#yearly").toggleClass("active");
        }),
        e(".tag-closable").on("click", function () {
            e(this).parent(".dm-tag ").remove();
        });
    const m = { gridItemsSelector: ".filtr-item", gutterPixels: 25, spinner: { enabled: !0 }, layout: "sameSize" },
        h = { gridItemsSelector: ".filtr-item--style2", gutterPixels: 25, layout: "sameHeight" };
    if (null !== document.querySelector(".filtr-container")) {
        new Filterizr(".filtr-container", m);
    }
    if (null !== document.querySelector(".filtr-container2")) {
        new Filterizr(".filtr-container2", h);
    }
    const v = document.querySelectorAll(".simplefilter li");
    Array.from(v).forEach((e) =>
        e.addEventListener("click", function () {
            v.forEach((e) => e.classList.remove("active")), e.classList.add("active");
        })
    ),
        e("#ueberTab a").on("click", function (t) {
            for (otherTabs = e(this).attr("data-secondary").split(","), i = 0; i < otherTabs.length; i++)
                (nav = e('<ul class="nav d-none" id="tmpNav"></ul>')), nav.append('<li class="nav-item"><a href="#" data-bs-toggle="tab" data-bs-target="' + otherTabs[i] + '">nav</a></li>"'), nav.find("a").tab("show");
        }),
        e(".rating-basic").starRating({ emptyColor: "#C6D0DC", hoverColor: "#FA8B0C", ratedColor: "#FA8B0C", disableAfterRate: !1, useFullStars: !0, starSize: 12, strokeWidth: 6 }),
        e(".rating-readOnly").starRating({ emptyColor: "#C6D0DC", hoverColor: "#FA8B0C", ratedColor: "#FA8B0C", activeColor: "#FA8B0C", useGradient: !1, initialRating: 2, readOnly: !0, starSize: 12, strokeWidth: 6 }),
        e(".rating-half-star").starRating({ emptyColor: "#C6D0DC", hoverColor: "#FA8B0C", ratedColor: "#FA8B0C", activeColor: "#FA8B0C", initialRating: 2, starSize: 12, strokeWidth: 6 }),
        e(".rater").starRating({
            emptyColor: "#C6D0DC",
            hoverColor: "#FA8B0C",
            ratedColor: "#FA8B0C",
            activeColor: "#FA8B0C",
            useFullStars: !0,
            initialRating: 2,
            starSize: 12,
            strokeWidth: 6,
            disableAfterRate: !1,
            onHover: function (t, s, a) {
                e(".rate-count").text(t);
            },
            onLeave: function (t, s, a) {
                e(".rate-count").text(s);
            },
        }),
        e("[data-countdown]").each(function () {
            e(this).countdown(e(this).data("countdown"), function (t) {
                e(this).html(
                    "<ul>" + t.strftime('<li><span class="statistics-countdown__time">%H</span>:</li><li><span class="statistics-countdown__time">%M</span>:</li><li><span class="statistics-countdown__time">%S</span></li>') + "</ul>"
                );
            });
        }),
        e("#switch-spin").on("change", function () {
            e(this).is(":checked") ? e(".spin-embadded").addClass("spin-active") : e(".spin-embadded").removeClass("spin-active");
        }),
        e(".kb__select-wrapper select,.tagSelect-rtl select").select2({ dir: "rtl", dropdownAutoWidth: !0, dropdownParent: e(".kb__select-wrapper .select2,.tagSelect-rtl .select2") });
    const g = document.querySelector(".upload-one");
    // null !== g &&
    //     g.addEventListener(
    //         "change",
    //         function () {
    //             if (window.File && window.FileList && window.FileReader) {
    //                 let t = event.target.files,
    //                     s = e(".dm-upload__file ul");
    //                 for (let e = 0; e < t.length; e++) {
    //                     let a = t[e];
    //                     if (!a.type.match("image")) continue;
    //                     let i = new FileReader();
    //                     i.addEventListener("load", function (e) {
    //                         e.target;
    //                         let t = `\n                      <li>\n                        <a href="#" class="file-name"><i class="las la-paperclip"></i> <span class="name-text">${a.name}<span></a>\n                        <a href="#" class="btn-delete"><i class="la la-trash"></i></a>\n                      </li>\n                    `;
    //                         s.append(t);
    //                     }),
    //                         i.readAsDataURL(a);
    //                 }
    //             } else console.log("Browser not support");
    //         },
    //         !1
    //     ),
    //     e("#time-picker,#time-picker2").wickedpicker();
    let f = function (t, s) {
        var a = s.value || 20,
            i = s.handle || e(".ui-slider-handle"),
            l = `<span class="tooltip-text">${a}</span>`;
        e(i).html(l);
    };
    (e("#switch-slider").on("change", function () {
        e(this).is(":checked")
            ? (e(".slider-wrapper").addClass("disabled"), e(".slider-basic , .slider-range").slider({ disabled: "true" }))
            : (e(".slider-wrapper").removeClass("disabled"), e(".slider-basic, .slider-range").slider({ disabled: "false" }));
    }),
    e(".slider-basic").slider({ range: "min", min: 0, max: 50, value: 20, slide: f, create: f }),
    e(".slider-range").slider({ range: !0, min: 0, max: 50, values: [15, 30], slide: f, create: f }),
    e("#switch-slider").on("change", function () {
        e(this).is(":checked")
            ? (e(".slider-wrapper").addClass("disabled"), e(".slider-basic , .slider-range").slider({ disabled: "true" }))
            : (e(".slider-wrapper").removeClass("disabled"), e(".slider-basic, .slider-range").slider({ disabled: "false" }));
    }),
    e(".modal--selected").length) && new bootstrap.Modal(document.querySelector(".modal--selected")).show();
    const w = document.querySelectorAll(".drawer-trigger"),
        b = document.querySelector(".drawer-basic-wrap"),
        y = document.querySelector(".overlay-dark"),
        C = document.querySelectorAll(".btdrawer-close"),
        k = document.querySelector(".drawer-multiLevel"),
        S = document.querySelector(".area-drawer"),
        L = document.querySelector(".area-overlay");
    function x(e) {
        e.preventDefault(),
            "basic" == this.dataset.drawer
                ? (b.classList.remove("account"), b.classList.remove("profile"), b.classList.add("basic"), b.classList.add("show"), y.classList.add("show"))
                : "area" == this.dataset.drawer
                ? (S.classList.add("show"), L.classList.add("show"))
                : "account" == this.dataset.drawer
                ? (b.classList.remove("basic"), b.classList.remove("profile"), b.classList.add("account"), b.classList.add("show"), y.classList.add("show"))
                : "profile" == this.dataset.drawer && (b.classList.remove("basic"), b.classList.remove("account"), b.classList.add("profile"), b.classList.add("show"), y.classList.add("show"));
    }
    function T() {
        b.classList.remove("show"), y.classList.remove("show"), S.classList.remove("show"), L.classList.remove("show"), k.classList.remove("show");
    }
    w && w.forEach((e) => e.addEventListener("click", x)), y && y.addEventListener("click", T), C && C.forEach((e) => e.addEventListener("click", T)), L && L.addEventListener("click", T);
    let D = document.getElementsByName("radio-placement");
    function _() {
        for (var e = 0; e < D.length; e++)
            if (D[e].checked) {
                "top" == D[e].value
                    ? (b.classList.add("top"), b.classList.remove("right"), b.classList.remove("bottom"), b.classList.remove("left"))
                    : "left" == D[e].value
                    ? (b.classList.add("left"), b.classList.remove("right"), b.classList.remove("bottom"), b.classList.remove("top"))
                    : "bottom" == D[e].value
                    ? (b.classList.add("bottom"), b.classList.remove("right"), b.classList.remove("left"), b.classList.remove("top"))
                    : "right" == D[e].value && (b.classList.add("right"), b.classList.remove("left"), b.classList.remove("bottom"), b.classList.remove("top"));
                break;
            }
    }
    D && D.forEach((e) => e.addEventListener("change", _));
    const E = document.querySelectorAll(".drawer-multiTrigger"),
        q = document.querySelector(".overlay-dark-l2");
    function F() {
        "level-one" == this.dataset.drawer
            ? (k.classList.add("level-one"), k.classList.add("show"), k.classList.remove("level-two"), y.classList.add("show"))
            : "level-two" == this.dataset.drawer && (k.classList.add("level-two"), q.classList.add("show"), k.classList.add("show"));
    }
    function A() {
        e(".upload-avatar-input").on("change", function () {
            !(function (t) {
                if (t.files && t.files[0]) {
                    let s = new FileReader();
                    (s.onload = function (t) {
                        e(".avatrSrc").attr("src", t.target.result);
                    }),
                        s.readAsDataURL(t.files[0]);
                }
            })(this);
        });
    }
    var M, R;
    q &&
        q.addEventListener("click", function () {
            k.classList.remove("level-two"), q.classList.remove("show");
        }),
        E && E.forEach((e) => e.addEventListener("click", F)),
        e(".dm-upload-avatar").on("click", function (t) {
            t.preventDefault(), A(), e(".upload-avatar-input").click();
        }),
        (M = ".menu-collapsable .dm-menu__link"),
        e(".menu-wrapper .menu-collapsable " + (R = ".dm-submenu")).slideUp(),
        e(".menu-wrapper " + M).on("click", function (t) {
            e(this).parent().hasClass("has-submenu") && t.preventDefault(), e(this).toggleClass("open").siblings(R).slideToggle().parent().siblings(".sub-menu").children(R).slideUp().siblings(M).removeClass("open");
        }),
        e("#select-component").select2({ minimumResultsForSearch: 1 / 0 }),
        e("#id_label_single").select2({ placeholder: "All", dropdownCssClass: "category-member", allowClear: !0 }),
        e("#select-search,.kb__select,.select-search").select2({ placeholder: "Search a person", dropdownCssClass: "category-member", allowClear: !0 }),
        e("#select-alerts2").select2({ placeholder: "Alerts", dropdownCssClass: "alert2", allowClear: !0 }),
        e("#select-option2").select2({ placeholder: "Select an option...", dropdownCssClass: "option2", allowClear: !0 }),
        e("#select-tag,#select-tag2").select2({ placeholder: "Tag Mode", dropdownCssClass: "tag", allowClear: !0 }),

        e(".toggle-password2").click(function () {
            e(this).toggleClass("uil-eye");

            var input = e(this).parent().find("#password-field");
            if (input.attr("type") == "password") {
              input.attr("type", "text");
            } else {
              input.attr("type", "password");
            }

            input = e(this).parent().find("#old-password");
            if (input.attr("type") == "password") {
              input.attr("type", "text");
            } else {
              input.attr("type", "password");
            }

            input = e(this).parent().find("#new-password");
            if (input.attr("type") == "password") {
              input.attr("type", "text");
            } else {
              input.attr("type", "password");
            }
          });

        e(".open-popup-modal").each(function (t, s) {
            e(s).on("click", function () {
                e(this).siblings(".popup-overlay").fadeIn("slow").addClass("active"), e(this).siblings(".popup-overlay").children(".popup-content").fadeIn("slow").addClass("active"), e("body").fadeIn("slow").addClass("is-open");
            });
        }),
        e(".limit-list-item ul").each(function () {
            e(this).find("li").length > 5 && (e("li", this).eq(4).nextAll().hide().addClass("toggleable"), e(this).append('<li class="mt-2 more">See more</li>'));
        }),
        e(".limit-list-item ul").on("click", ".more", function () {
            e(this).hasClass("less") ? e(this).text("See more").removeClass("less") : e(this).text("See less").addClass("less"), e(this).siblings("li.toggleable").slideToggle();
        }),
        e("body").on("click", function (t) {
            t.target.closest(".open-popup-modal, .popup-content") || (e(".popup-overlay, .popup-content").fadeIn("slow").removeClass("active"), e("body").fadeIn("slow").removeClass("is-open"));
        }),
        window.addEventListener(
            "keydown",
            function (t) {
                ("Escape" != t.key && "Esc" != t.key && 27 != t.keyCode) || "BODY" != t.target.nodeName || (e(".popup-overlay, .popup-content").fadeIn("slow").removeClass("active"), e("body").fadeIn("slow").removeClass("is-open"));
            },
            !0
        ),
        e('.bd-example-indeterminate [type="checkbox"]').prop("indeterminate", !0);
    let B = document.querySelectorAll(".sidebar li.has-child"),
        z = document.querySelector("html").getAttribute("dir");
    B.forEach((e) => {
        e.addEventListener("mouseover", function () {
            let e = this,
                t = e.getBoundingClientRect(),
                s = e.querySelector("ul");
            (s.style.top = t.top + "px"), "ltr" === z ? (s.style.left = t.left + Math.round(0.75 * e.offsetWidth) + 10 + "px") : "rtl" === z && (s.style.right = Math.round(0.75 * e.offsetWidth) + 10 + "px");
        });
    });
    const O = document.querySelector(".sidebar_nav li a.active");
    if (null !== O) {
        const t = O.offsetTop;
        e(".sidebar").animate({ scrollTop: t - 120 }, "slow");
    }
    const I = document.querySelector(".btn-compose"),
        P = document.querySelector(".btn-add-label"),
        $ = document.querySelector(".dm-mailCompose"),
        H = document.querySelector(".add-lebel-from"),
        j = document.querySelector(".compose-close"),
        W = document.querySelector(".label-close");
    function Q(t) {
        t.preventDefault(), "label" == this.dataset.trigger ? H.classList.add("show") : "compose" == this.dataset.trigger && $.classList.add("show"), e(t.target).hasClass("label-close") && H.classList.remove("show");
    }
    function U(e) {
        e.preventDefault(), "label" == this.dataset.trigger ? H.classList.remove("show") : "compose" == this.dataset.trigger && $.classList.remove("show");
    }
    null !== I && null !== j && (I.addEventListener("click", Q), P.addEventListener("click", Q)), null !== j && null !== W && (j.addEventListener("click", U), W.addEventListener("click", U));
    let N = moment().subtract(6, "days"),
        Y = moment();
    e('input[name="date-ranger"]').daterangepicker({
        singleDatePicker: !1,
        startDate: N,
        endDate: Y,
        autoUpdateInput: !1,
        ranges: {
            Today: [moment(), moment()],
            Yesterday: [moment().subtract(1, "days"), moment().subtract(1, "days")],
            "Last 7 Days": [moment().subtract(6, "days"), moment()],
            "This Month": [moment().startOf("month"), moment().endOf("month")],
            "Last Month": [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")],
        },
    }),
        jQuery('<div class="pt_QuantityNav"><div class="pt_QuantityButton pt_QuantityUp"><i class="las la-angle-up"></i></div><div class="pt_QuantityButton pt_QuantityDown"><i class="las la-angle-down"></i></div></div>').insertAfter(
            ".pt_Quantity input"
        ),
        jQuery(".pt_Quantity").each(function () {
            var e = jQuery(this),
                t = e.find('input[type="number"]'),
                s = e.find(".pt_QuantityUp"),
                a = e.find(".pt_QuantityDown"),
                i = t.attr("min"),
                l = t.attr("max");
            t.val(),
                s.on("click", function () {
                    var s = parseFloat(t.val());
                    if (s >= l) var a = s;
                    else a = s + 1;
                    e.find("input").val(a), e.find("input").trigger("change");
                }),
                a.on("click", function () {
                    var s = parseFloat(t.val());
                    if (s <= i) var a = s;
                    else a = s - 1;
                    e.find("input").val(a), e.find("input").trigger("change");
                });
        }),
        e(".line").peity("line", { fill: !1, height: 100, width: 400 }),
        e(".area-line").peity("line", { height: 100, width: 400 });
    [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]')).map(function (e) {
        return new bootstrap.Tooltip(e);
    });
    document.getElementsByClassName("new-member__2").length && new bootstrap.Modal(document.getElementById("new-member2")).show();
    document.getElementsByClassName("add-contact__2").length && new bootstrap.Modal(document.getElementById("add-contact")).show();
    const G = document.querySelectorAll("[data-layout]");
    function X(t) {
        t.preventDefault(),
            "light" === this.dataset.layout
                ? (e("ul.l_sidebar li a,.l_sidebar a").removeClass("active"), e(this).addClass("active"), e("body").removeClass("layout-dark"), e("body").addClass("layout-light"))
                : "dark" === this.dataset.layout
                ? (e("ul.l_sidebar li a,.l_sidebar a").removeClass("active"), e(this).addClass("active"), e("body").removeClass("layout-light"), e("body").addClass("layout-dark"))
                : "side" === this.dataset.layout
                ? (e("ul.l_navbar li a,.l_navbar a").removeClass("active"), e(this).addClass("active"), e("body").removeClass("top-menu"), e("body").addClass("side-menu"))
                : "top" === this.dataset.layout && (e("ul.l_navbar li a,.l_navbar a").removeClass("active"), e(this).addClass("active"), e("body").removeClass("side-menu"), e("body").addClass("top-menu"));
    }
    e(".enable-dark-mode").click(function () {
        e("body").toggleClass("layout-dark"), e(".enable-dark-mode a").toggleClass("active");
    }),
        G && (G.forEach((e) => e.addEventListener("click", X)), G.forEach((e) => e.addEventListener("click", ee)));
    const J = document.querySelector(".customizer-trigger"),
        K = document.querySelector(".customizer-wrapper"),
        V = document.querySelector(".customizer-close"),
        Z = document.querySelector(".customizer-overlay");
    function ee(e) {
        e.preventDefault(), K.classList.remove("show"), J.classList.remove("show"), Z.classList.remove("show");
    }
    function te(t, s, a) {
        var i, l;
        try {
            (l = e.datepicker.parseDate(a, t)), e.datepicker.parseDate(a, s) < l && ((i = t), (t = s), (s = i));
        } catch (e) {}
        return { start: t, end: s };
    }
    J &&
        J.addEventListener("click", function (t) {
            t.preventDefault(), this.classList.toggle("show"), K.classList.toggle("show"), e(".customizer-overlay").addClass("show");
        }),
        V && Z && (V.addEventListener("click", ee), Z.addEventListener("click", ee)),
        e(".search-toggle").on("click", function (t) {
            t.preventDefault(), e(this).toggleClass("active"), e(".search-form-topMenu").toggleClass("show");
        }),
        e(".date-picker__calendar").datepicker(),
        (e.fn.dateRangePicker = function (t) {
            t = e.extend({ changeMonth: !1, changeYear: !1, numberOfMonths: 2, rangeSeparator: " - ", useHiddenAltFields: !1 }, t || {});
            var s,
                a = e(this),
                i = t.onSelect || e.noop,
                l = t.onClose || e.noop,
                o = t.beforeShow || e.noop,
                n = t.beforeShowDay;
            function r(a, i) {
                var l, o;
                (a = a.split(t.rangeSeparator)).length > 0 ? ((l = e.datepicker.parseDate(i, a[0])), a.length > 1 && (o = e.datepicker.parseDate(i, a[1])), (s = { start: l, end: o })) : (s = null);
            }
            return (
                (t.beforeShow = function (t, s) {
                    var i = a.datepicker("option", "dateFormat");
                    r(e(t).val(), i), o.apply(a, arguments);
                }),
                (t.beforeShowDay = function (e) {
                    var t,
                        i = [!0, ""];
                    return s && s.start <= e && s.end && e <= s.end && (i[1] = "ui-datepicker-range"), n && ((t = n.apply(a, arguments)), (i[0] = i[0] && t[0]), (i[1] = i[1] + " " + t[1]), (i[2] = t[2])), i;
                }),
                (t.onSelect = function (s, l) {
                    var o;
                    if (l.rangeStart) {
                        if (((l.inline = !1), (o = l.rangeStart) !== s)) {
                            var n = a.datepicker("option", "dateFormat"),
                                r = te(o, s, n);
                            if ((a.val(r.start + t.rangeSeparator + r.end), (l.rangeStart = null), t.useHiddenAltFields)) {
                                var d = a.attr("data-to-field"),
                                    c = a.attr("data-from-field");
                                e("#" + c).val(r.start), e("#" + d).val(r.end);
                            }
                        }
                    } else (l.inline = !0), (l.rangeStart = s);
                    i.apply(a, arguments);
                }),
                (t.onClose = function (e, t) {
                    (t.rangeStart = null), (t.inline = !1), l.apply(a, arguments);
                }),
                this.each(function () {
                    a.is("input") && a.datepicker(t), a.wrap('<div class="dateRangeWrapper"></div>');
                })
            );
        }),
        e(document).ready(function () {
            e("#txtDateRange").dateRangePicker({ showOn: "focus", rangeSeparator: " - ", dateFormat: "dd/mm/yy", useHiddenAltFields: !0, constrainInput: !0 });
        });
})(jQuery);
